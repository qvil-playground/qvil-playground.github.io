{"version":3,"sources":["webpack:///./src/components/UserInfo/index.jsx","webpack:///./src/components/Disqus/index.jsx","webpack:///./src/components/PostInfo/index.jsx","webpack:///./src/components/SocialLinks/index.jsx","webpack:///./src/components/PostSuggestions/index.jsx","webpack:///./src/templates/post.jsx","webpack:///./src/components/PostTags/index.jsx","webpack:///./src/components/SEO/index.jsx","webpack:///./src/components/PostCover/PostCoverComponent.jsx","webpack:///./src/components/PostCover/index.jsx"],"names":["UserInfo","render","_this$props$config","this","props","config","userAvatar","userName","userLocation","userDescription","userLinks","userTwitter","expanded","userLinksElement","react_default","a","createElement","UserLinks","labeled","Card_default","className","CardTitle_default","expander","avatar","Avatars_default","src","role","title","subtitle","dist","username","options","count","CardText_default","expandable","IconSeparator_default","label","iconBefore","FontIcons_default","iconClassName","Component","Disqus","_this","_Component","call","state","toasts","notifyAboutComment","bind","assertThisInitialized_default","onSnackbarDismiss","slice","setState","push","text","_this$props","postNode","disqusShortname","post","frontmatter","url","urljoin","siteUrl","pathPrefix","fields","slug","icon","main_default","shortname","identifier","category_id","onNewComment","Snackbars_default","onDismiss","PostInfo","moment","date","format","dateFormat","timeToRead","gatsby_browser_entry","to","kebabCase_default","category","SocialLinks","postPath","mobile","iconSize","renderShareCount","filter","RedditShareButton","RedditIcon","round","size","RedditShareCount","TwitterShareButton","TwitterIcon","GooglePlusShareButton","GooglePlusIcon","GooglePlusShareCount","FacebookShareButton","quote","excerpt","FacebookIcon","FacebookShareCount","LinkedinShareButton","description","LinkedinIcon","LinkedinShareCount","TelegramShareButton","TelegramIcon","PostSuggestions","postFields","prevSlug","forceFontSize","forceSize","prevTitle","nextSlug","nextTitle","PostTemplate","_React$Component","handleResize","componentDidMount","window","addEventListener","componentWillUnmount","removeEventListener","innerWidth","pageContext","postOverlapClass","data","markdownRemark","id","postDefaultCategoryID","coverHeight","layout","location","Helmet_default","siteTitle","rel","href","SEO","postSEO","PostCover","coverClassName","Cards_default","components_PostInfo","dangerouslySetInnerHTML","__html","html","PostTags","tags","components_SocialLinks","components_UserInfo","components_Disqus","components_PostSuggestions_PostSuggestions","React","pageQuery","react__WEBPACK_IMPORTED_MODULE_2___default","map","tag","gatsby__WEBPACK_IMPORTED_MODULE_3__","key","style","textDecoration","lodash_kebabCase__WEBPACK_IMPORTED_MODULE_1___default","react_md_lib_Chips__WEBPACK_IMPORTED_MODULE_4___default","image","postURL","postMeta","cover","siteDescription","siteLogo","blogURL","schemaOrgJSONLD","@context","@type","name","alternateName","siteTitleAlt","itemListElement","position","item","@id","headline","react__WEBPACK_IMPORTED_MODULE_1___default","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","content","type","JSON","stringify","property","siteFBAppID","fileEdges","coverNodeList","fileNode","node","childImageSharp","absolutePath","indexOf","path","join","length","gatsby_image_default","fluid","outerWrapperClassName","height","width","coverURL","substring","__PATH_PREFIX__","backgroundImage","queryWrapper","query","PostCoverComponent","allFile","edges","_590853412"],"mappings":"iUAkEeA,oGAtDbC,OAAA,WAAS,IAAAC,EAQHC,KAAKC,MAAMC,OANbC,EAFKJ,EAELI,WACAC,EAHKL,EAGLK,SACAC,EAJKN,EAILM,aACAC,EALKP,EAKLO,gBACAC,EANKR,EAMLQ,UACAC,EAPKT,EAOLS,YAEMC,EAAaT,KAAKC,MAAlBQ,SACFC,EACJC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAWZ,OAAQF,KAAKC,MAAMC,OAAQa,QAASN,IAEjD,OAAKN,GAAeC,GAAaC,GAAiBC,EAWhDK,EAAAC,EAAAC,cAACG,EAAAJ,EAAD,CAAMK,UAAU,yCACdN,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CACEO,UAAWV,EACXW,OAAQjB,GAAcQ,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,CAAQU,IAAKnB,EAAYoB,KAAK,iBACpDC,MAAOpB,GAAYA,EACnBqB,SACEjB,EACEG,EAAAC,EAAAC,cAACa,EAAA,OAAD,CACEC,SAAUnB,EACVoB,QAAS,CAAEC,MAAkB,UAG/B,WAINlB,EAAAC,EAAAC,cAACiB,EAAAlB,EAAD,CAAUmB,YAAatB,GACpBJ,GACCM,EAAAC,EAAAC,cAACmB,EAAApB,EAAD,CAAeqB,MAAO5B,EAAc6B,YAAU,GAC5CvB,EAAAC,EAAAC,cAACsB,EAAAvB,EAAD,CAAUwB,cAAc,sBAG5BzB,EAAAC,EAAAC,cAAA,SAAIP,GAAmBA,GACtBI,IAjCDH,EAEAI,EAAAC,EAAAC,cAACG,EAAAJ,EAAD,CAAMK,UAAU,yCACbP,GAIA,SAtBU2B,sFCyDRC,cAxDb,SAAAA,EAAYrC,GAAO,IAAAsC,EAAA,OACjBA,EAAAC,EAAAC,KAAAzC,KAAMC,IAAND,MACK0C,MAAQ,CACXC,OAAQ,IAEVJ,EAAKK,mBAAqBL,EAAKK,mBAAmBC,KAAxBC,QAAAP,KAC1BA,EAAKQ,kBAAoBR,EAAKQ,kBAAkBF,KAAvBC,QAAAP,KANRA,sCASnBQ,kBAAA,WAAoB,IACNJ,EAAU3C,KAAK0C,MAAMC,OADfK,MAAA,GAElBhD,KAAKiD,SAAS,CAAEN,cAElBC,mBAAA,WACE,IAAMD,EAAS3C,KAAK0C,MAAMC,OAAOK,QACjCL,EAAOO,KAAK,CAAEC,KAAM,2BACpBnD,KAAKiD,SAAS,CAAEN,cAElB7C,OAAA,WAAS,IAAAsD,EACwBpD,KAAKC,MAA5BoD,EADDD,EACCC,SAAU5C,EADX2C,EACW3C,SAClB,IAAKP,IAAOoD,gBACV,OAAO,KAET,IAAMC,EAAOF,EAASG,YAChBC,EAAMC,IACVxD,IAAOyD,QACPzD,IAAO0D,WACPP,EAASQ,OAAOC,MAGlB,OACEnD,EAAAC,EAAAC,cAACG,EAAAJ,EAAD,CAAMK,UAAU,+BACdN,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CACEY,MAAM,WACNJ,OAAQT,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,CAAQmD,KAAMpD,EAAAC,EAAAC,cAACsB,EAAAvB,EAAD,kBACtBO,UAAWV,IAEbE,EAAAC,EAAAC,cAACiB,EAAAlB,EAAD,CAAUmB,YAAatB,GACrBE,EAAAC,EAAAC,cAACmD,EAAApD,EAAD,CACEqD,UAAW/D,IAAOoD,gBAClBY,WAAYX,EAAK/B,MACjBA,MAAO+B,EAAK/B,MACZiC,IAAKA,EACLU,YAAaZ,EAAKY,YAClBC,aAAcpE,KAAK4C,sBAGvBjC,EAAAC,EAAAC,cAACwD,EAAAzD,EAAD,CACE+B,OAAQ3C,KAAK0C,MAAMC,OACnB2B,UAAWtE,KAAK+C,yBAlDLV,2EC6BNkC,oGA7BbzE,OAAA,WAAS,IACCuD,EAAarD,KAAKC,MAAlBoD,SACFE,EAAOF,EAASG,YACtB,OACE7C,EAAAC,EAAAC,cAAA,OAAKI,UAAU,aACbN,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CACEQ,OAAQT,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,CAAQmD,KAAMpD,EAAAC,EAAAC,cAACsB,EAAAvB,EAAD,CAAUwB,cAAc,qBAC9CZ,MAAK,gBAAkBgD,IAAOnB,EAASQ,OAAOY,MAAMC,OAClDxE,IAAOyE,YAETlD,SAAa4B,EAASuB,WAAd,cAEVjE,EAAAC,EAAAC,cAACgE,EAAA,KAAD,CACE5D,UAAU,gBACV6D,GAAE,eAAiBC,IAAYxB,EAAKyB,WAEpCrE,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CACEQ,OACET,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,CAAQmD,KAAMpD,EAAAC,EAAAC,cAACsB,EAAAvB,EAAD,CAAUwB,cAAc,wBAExCZ,MAAM,cACNC,SAAU8B,EAAKyB,iBAtBJ3C,sKCiER4C,qGAnDbnF,OAAA,WAAS,IAAAsD,EACgCpD,KAAKC,MAApCoD,EADDD,EACCC,SAAU6B,EADX9B,EACW8B,SAAUC,EADrB/B,EACqB+B,OACtB5B,EAAOF,EAASG,YAChBC,EAAMC,IAAQxD,IAAOyD,QAASzD,IAAO0D,WAAYsB,GACjDE,EAAWD,EAAS,GAAK,GAEzBE,EAAmB,SAAAxD,GAAK,OAC5BlB,EAAAC,EAAAC,cAAA,OAAKI,UAAU,eAFF,SAAAY,GAAK,OAAKA,EAAQ,EAAIA,EAAQ,GAEbyD,CAAOzD,KAGvC,OACElB,EAAAC,EAAAC,cAAA,OAAKI,UAAU,gBACbN,EAAAC,EAAAC,cAAC0E,EAAA,EAAD,CAAmB9B,IAAKA,EAAKjC,MAAO+B,EAAK/B,OACvCb,EAAAC,EAAAC,cAAC2E,EAAA,EAAD,CAAYC,OAAK,EAACC,KAAMN,IACxBzE,EAAAC,EAAAC,cAAC8E,EAAA,EAAD,CAAkBlC,IAAKA,GACpB,SAAA5B,GAAK,OAAIwD,EAAiBxD,MAG/BlB,EAAAC,EAAAC,cAAC+E,EAAA,EAAD,CAAoBnC,IAAKA,EAAKjC,MAAO+B,EAAK/B,OACxCb,EAAAC,EAAAC,cAACgF,EAAA,EAAD,CAAaJ,OAAK,EAACC,KAAMN,KAE3BzE,EAAAC,EAAAC,cAACiF,EAAA,EAAD,CAAuBrC,IAAKA,GAC1B9C,EAAAC,EAAAC,cAACkF,EAAA,EAAD,CAAgBN,OAAK,EAACC,KAAMN,IAC5BzE,EAAAC,EAAAC,cAACmF,EAAA,EAAD,CAAsBvC,IAAKA,GACxB,SAAA5B,GAAK,OAAIwD,EAAiBxD,MAG/BlB,EAAAC,EAAAC,cAACoF,GAAA,EAAD,CAAqBxC,IAAKA,EAAKyC,MAAO7C,EAAS8C,SAC7CxF,EAAAC,EAAAC,cAACuF,GAAA,EAAD,CAAcX,OAAK,EAACC,KAAMN,IAC1BzE,EAAAC,EAAAC,cAACwF,GAAA,EAAD,CAAoB5C,IAAKA,GACtB,SAAA5B,GAAK,OAAIwD,EAAiBxD,MAG/BlB,EAAAC,EAAAC,cAACyF,GAAA,EAAD,CACE7C,IAAKA,EACLjC,MAAO+B,EAAK/B,MACZ+E,YAAalD,EAAS8C,SAEtBxF,EAAAC,EAAAC,cAAC2F,GAAA,EAAD,CAAcf,OAAK,EAACC,KAAMN,IAC1BzE,EAAAC,EAAAC,cAAC4F,GAAA,EAAD,CAAoBhD,IAAKA,GACtB,SAAA5B,GAAK,OAAIwD,EAAiBxD,MAG/BlB,EAAAC,EAAAC,cAAC6F,GAAA,EAAD,CAAqBjD,IAAKA,GACxB9C,EAAAC,EAAAC,cAAC8F,GAAA,EAAD,CAAclB,OAAK,EAACC,KAAMN,UA7CV/C,cClBLuE,qGACnB9G,OAAA,WAAS,IAED+G,EADe7G,KAAKC,MAAlBoD,SACoBQ,OAC5B,OACElD,EAAAC,EAAAC,cAAA,OAAKI,UAAU,wCACbN,EAAAC,EAAAC,cAACgE,EAAA,KAAD,CAAMC,GAAI+B,EAAWC,SAAU7F,UAAU,mBACvCN,EAAAC,EAAAC,cAACsB,EAAAvB,EAAD,CACEmG,eAAa,EACbC,UAAW,GACX/F,UAAU,6BAHZ,cAOAN,EAAAC,EAAAC,cAAA,OAAKI,UAAU,qCACbN,EAAAC,EAAAC,cAAA,MAAII,UAAU,6BAAd,YACAN,EAAAC,EAAAC,cAAA,MAAII,UAAU,+BACX4F,EAAWI,aAIlBtG,EAAAC,EAAAC,cAACgE,EAAA,KAAD,CAAMC,GAAI+B,EAAWK,SAAUjG,UAAU,mBACvCN,EAAAC,EAAAC,cAAA,OAAKI,UAAU,sBACbN,EAAAC,EAAAC,cAAA,MAAII,UAAU,6BAAd,QACAN,EAAAC,EAAAC,cAAA,MAAII,UAAU,+BACX4F,EAAWM,YAGhBxG,EAAAC,EAAAC,cAACsB,EAAAvB,EAAD,CACEmG,eAAa,EACbC,UAAW,GACX/F,UAAU,6BAHZ,uBA5BmCoB,0HCaxB+E,eACnB,SAAAA,EAAYnH,GAAO,IAAAsC,EAAA,OACjBA,EAAA8E,EAAA5E,KAAAzC,KAAMC,IAAND,MACK0C,MAAQ,CACXyC,QAAQ,GAEV5C,EAAK+E,aAAe/E,EAAK+E,aAAazE,KAAlBC,QAAAP,KALHA,sCAOnBgF,kBAAA,WACEvH,KAAKsH,eACLE,OAAOC,iBAAiB,SAAUzH,KAAKsH,iBAGzCI,qBAAA,WACEF,OAAOG,oBAAoB,SAAU3H,KAAKsH,iBAG5CA,aAAA,WACME,OAAOI,YAAc,IACvB5H,KAAKiD,SAAS,CAAEkC,QAAQ,IAExBnF,KAAKiD,SAAS,CAAEkC,QAAQ,OAI5BrF,OAAA,WAAS,IACCqF,EAAWnF,KAAK0C,MAAhByC,OACArB,EAAS9D,KAAKC,MAAM4H,YAApB/D,KACFrD,GAAY0E,EACZ2C,EAAmB3C,EAAS,sBAAwB,eACpD9B,EAAWrD,KAAKC,MAAM8H,KAAKC,eAC3BzE,EAAOF,EAASG,YACjBD,EAAK0E,KACR1E,EAAK0E,GAAKnE,GAEPP,EAAKY,cACRZ,EAAKY,YAAcjE,IAAOgI,uBAG5B,IAAMC,EAAchD,EAAS,IAAM,IACnC,OACExE,EAAAC,EAAAC,cAACuH,EAAA,EAAD,CAAQC,SAAUrI,KAAKC,MAAMoI,UAC3B1H,EAAAC,EAAAC,cAAA,OAAKI,UAAU,yCACbN,EAAAC,EAAAC,cAACyH,EAAA1H,EAAD,KACED,EAAAC,EAAAC,cAAA,aAAW0C,EAAK/B,MAAhB,MAA2BtB,IAAOqI,WAClC5H,EAAAC,EAAAC,cAAA,QAAM2H,IAAI,YAAYC,KAAI,GAAKvI,IAAOyD,QAAUJ,EAAK0E,MAEvDtH,EAAAC,EAAAC,cAAC6H,GAAA,EAAD,CAAKxD,SAAUpB,EAAMT,SAAUA,EAAUsF,SAAO,IAChDhI,EAAAC,EAAAC,cAAC+H,EAAA,EAAD,CACEvF,SAAUA,EACV8E,YAAaA,EACbU,eAAe,kCAEjBlI,EAAAC,EAAAC,cAAA,OACEI,UAAS,oDAAsD6G,GAE/DnH,EAAAC,EAAAC,cAACiI,EAAAlI,EAAD,CAAMK,UAAU,oCACdN,EAAAC,EAAAC,cAACiB,EAAAlB,EAAD,CAAUK,UAAU,aAClBN,EAAAC,EAAAC,cAAA,MAAII,UAAU,4BAA4BsC,EAAK/B,OAC/Cb,EAAAC,EAAAC,cAACkI,EAAD,CAAU1F,SAAUA,IACpB1C,EAAAC,EAAAC,cAAA,OAAKmI,wBAAyB,CAAEC,OAAQ5F,EAAS6F,SAEnDvI,EAAAC,EAAAC,cAAA,OAAKI,UAAU,aACbN,EAAAC,EAAAC,cAACsI,EAAA,EAAD,CAAUC,KAAM7F,EAAK6F,OACrBzI,EAAAC,EAAAC,cAACwI,GAAD,CACEnE,SAAUpB,EACVT,SAAUA,EACV8B,OAAQnF,KAAK0C,MAAMyC,WAIzBxE,EAAAC,EAAAC,cAACyI,EAAD,CACErI,UAAU,8BACVf,OAAQA,IACRO,SAAUA,IAEZE,EAAAC,EAAAC,cAAC0I,EAAD,CAAQlG,SAAUA,EAAU5C,SAAUA,KAGxCE,EAAAC,EAAAC,cAAC2I,GAAD,CAAiBnG,SAAUA,UA/EKoG,IAAMpH,WAsFnCqH,GAAS,+HClGhBP,oGACJrJ,OAAA,WAAS,IACCsJ,EAASpJ,KAAKC,MAAdmJ,KACR,OACEO,EAAA/I,EAAAC,cAAA,OAAKI,UAAU,sBACZmI,GACCA,EAAKQ,IAAI,SAAAC,GAAG,OACVF,EAAA/I,EAAAC,cAACiJ,EAAA,KAAD,CACEC,IAAKF,EACLG,MAAO,CAAEC,eAAgB,QACzBnF,GAAE,SAAWoF,IAAYL,IAEzBF,EAAA/I,EAAAC,cAACsJ,EAAAvJ,EAAD,CAAMqB,MAAO4H,EAAK5I,UAAU,8BAZnBoB,cAoBR8G,is7GCrBTT,4FACJ5I,OAAA,WAAS,IAEH0B,EACA+E,EACA6D,EACAC,EALGjH,EACiCpD,KAAKC,MAArCoD,EADDD,EACCC,SAAU6B,EADX9B,EACW8B,SAAUyD,EADrBvF,EACqBuF,QAK5B,GAAIA,EAAS,CACX,IAAM2B,EAAWjH,EAASG,YACvBhC,EAAU8I,EAAV9I,MACH+E,EAAc+D,EAAS/D,YACnB+D,EAAS/D,YACTlD,EAAS8C,QACbiE,EAAQE,EAASC,MACjBF,EAAU3G,IAAQxD,IAAOyD,QAASzD,IAAO0D,WAAYsB,QAErD1D,EAAQtB,IAAOqI,UACfhC,EAAcrG,IAAOsK,gBACrBJ,EAAQlK,IAAOuK,SAEjBL,EAAQ1G,IAAQxD,IAAOyD,QAASzD,IAAO0D,WAAYwG,GACnD,IAAMM,EAAUhH,IAAQxD,IAAOyD,QAASzD,IAAO0D,YACzC+G,EAAkB,CACtB,CACEC,WAAY,oBACZC,QAAS,UACTpH,IAAKiH,EACLI,KAAMtJ,EACNuJ,cAAe7K,IAAO8K,aAAe9K,IAAO8K,aAAe,KAmC/D,OAhCIrC,GACFgC,EAAgBzH,KAAK,CACnB,CACE0H,WAAY,oBACZC,QAAS,iBACTI,gBAAiB,CACf,CACEJ,QAAS,WACTK,SAAU,EACVC,KAAM,CACJC,MAAOf,EACPS,KAAMtJ,EACN4I,YAKR,CACEQ,WAAY,oBACZC,QAAS,cACTpH,IAAKiH,EACLI,KAAMtJ,EACNuJ,cAAe7K,IAAO8K,aAAe9K,IAAO8K,aAAe,GAC3DK,SAAU7J,EACV4I,MAAO,CACLS,QAAS,cACTpH,IAAK2G,GAEP7D,iBAKJ+E,EAAA1K,EAAAC,cAAC0K,EAAA3K,EAAD,KAEE0K,EAAA1K,EAAAC,cAAA,QAAMiK,KAAK,cAAcU,QAASjF,IAClC+E,EAAA1K,EAAAC,cAAA,QAAMiK,KAAK,QAAQU,QAASpB,IAG5BkB,EAAA1K,EAAAC,cAAA,UAAQ4K,KAAK,uBACVC,KAAKC,UAAUhB,IAIlBW,EAAA1K,EAAAC,cAAA,QAAM+K,SAAS,SAASJ,QAAS7C,EAAU0B,EAAUK,IACpD/B,EAAU2C,EAAA1K,EAAAC,cAAA,QAAM+K,SAAS,UAAUJ,QAAQ,YAAe,KAC3DF,EAAA1K,EAAAC,cAAA,QAAM+K,SAAS,WAAWJ,QAAShK,IACnC8J,EAAA1K,EAAAC,cAAA,QAAM+K,SAAS,iBAAiBJ,QAASjF,IACzC+E,EAAA1K,EAAAC,cAAA,QAAM+K,SAAS,WAAWJ,QAASpB,IACnCkB,EAAA1K,EAAAC,cAAA,QACE+K,SAAS,YACTJ,QAAStL,IAAO2L,YAAc3L,IAAO2L,YAAc,KAIrDP,EAAA1K,EAAAC,cAAA,QAAMiK,KAAK,eAAeU,QAAQ,wBAClCF,EAAA1K,EAAAC,cAAA,QACEiK,KAAK,kBACLU,QAAStL,IAAOM,YAAcN,IAAOM,YAAc,KAErD8K,EAAA1K,EAAAC,cAAA,QAAMiK,KAAK,gBAAgBU,QAAShK,IACpC8J,EAAA1K,EAAAC,cAAA,QAAMiK,KAAK,sBAAsBU,QAASjF,IAC1C+E,EAAA1K,EAAAC,cAAA,QAAMiK,KAAK,gBAAgBU,QAASpB,SA7F1B/H,aAmGHqG,iICvDAE,oGA3Cb9I,OAAA,WAAS,IAAAsD,EACsDpD,KAAKC,MAA1D6L,EADD1I,EACC0I,UAAWzI,EADZD,EACYC,SAAU8E,EADtB/E,EACsB+E,YAAaU,EADnCzF,EACmCyF,eACpCtF,EAAOF,EAASG,YAAcH,EAASG,YAAcH,EACrD0I,EAAgBD,EAAUxG,OAAO,SAAA0G,GACrC,OAAsC,OAAlCA,EAASC,KAAKC,kBAKT,IAFPF,EAASC,KAAKE,aAAaC,QACzBC,IAAKC,KAAK,kBAAmB/I,EAAKgH,UAQxC,GAA6B,IAAzBwB,EAAcQ,OAChB,OACE5L,EAAAC,EAAAC,cAAC2L,EAAA5L,EAAD,CACE6L,MAAOV,EAAc,GAAGE,KAAKC,gBAAgBO,MAC7CC,sBAAuB7D,EACvBmB,MAAO,CAAE2C,OAAQxE,EAAayE,MAAO,UAM3C,IAAMC,EAC2B,MAA/BtJ,EAAKgH,MAAMuC,UAAU,EAAG,GACpBC,6BAAkBxJ,EAAKgH,MACvBhH,EAAKgH,MACX,OACE5J,EAAAC,EAAAC,cAAA,OACEmJ,MAAO,CACLgD,gBAAe,OAASH,EAAT,IACfF,OAAWxE,EAAL,MAERlH,UAAW4H,QAtCKxG,cCDlB4K,4FACJnN,OAAA,WAAS,IAAAsD,EAC2CpD,KAAKC,MAA/CoD,EADDD,EACCC,SAAU8E,EADX/E,EACW+E,YAAaU,EADxBzF,EACwByF,eAC/B,OACElI,EAAAC,EAAAC,cAACgE,EAAA,YAAD,CACEqI,MAAK,YAoCLpN,OAAQ,SAAAiI,GAAI,OACVpH,EAAAC,EAAAC,cAACsM,EAAD,CACErB,UAAW/D,EAAKqF,QAAQC,MACxBhK,SAAUA,EACV8E,YAAaA,EACbU,eAAgBA,KA1CtBd,KAAAuF,QAJqBjL,aAsDZ4K","file":"component---src-templates-post-jsx-8697189002dbb4143490.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport Card from \"react-md/lib/Cards/Card\";\r\nimport CardTitle from \"react-md/lib/Cards/CardTitle\";\r\nimport CardText from \"react-md/lib/Cards/CardText\";\r\nimport Avatar from \"react-md/lib/Avatars\";\r\nimport FontIcon from \"react-md/lib/FontIcons\";\r\nimport IconSeparator from \"react-md/lib/Helpers/IconSeparator\";\r\nimport { Follow } from \"react-twitter-widgets\";\r\nimport UserLinks from \"../UserLinks\";\r\nimport \"./UserInfo.scss\";\r\n\r\nclass UserInfo extends Component {\r\n  render() {\r\n    const {\r\n      userAvatar,\r\n      userName,\r\n      userLocation,\r\n      userDescription,\r\n      userLinks,\r\n      userTwitter\r\n    } = this.props.config;\r\n    const { expanded } = this.props;\r\n    const userLinksElement = (\r\n      <UserLinks config={this.props.config} labeled={expanded} />\r\n    );\r\n    if (!userAvatar && !userName && !userLocation && !userDescription) {\r\n      if (userLinks) {\r\n        return (\r\n          <Card className=\"md-grid md-cell md-cell--12 user-info\">\r\n            {userLinksElement}\r\n          </Card>\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    return (\r\n      <Card className=\"md-grid md-cell md-cell--12 user-info\">\r\n        <CardTitle\r\n          expander={!expanded}\r\n          avatar={userAvatar && <Avatar src={userAvatar} role=\"presentation\" />}\r\n          title={userName && userName}\r\n          subtitle={\r\n            userTwitter ? (\r\n              <Follow\r\n                username={userTwitter}\r\n                options={{ count: expanded ? \"none\" : \"none\" }}\r\n              />\r\n            ) : (\r\n              \"Author\"\r\n            )\r\n          }\r\n        />\r\n        <CardText expandable={!expanded}>\r\n          {userLocation && (\r\n            <IconSeparator label={userLocation} iconBefore>\r\n              <FontIcon iconClassName=\"fa fa-map-marker\" />\r\n            </IconSeparator>\r\n          )}\r\n          <p>{userDescription && userDescription}</p>\r\n          {userLinksElement}\r\n        </CardText>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\nexport default UserInfo;\r\n","import React, { Component } from \"react\";\r\nimport ReactDisqusComments from \"react-disqus-comments\";\r\nimport urljoin from \"url-join\";\r\nimport Card from \"react-md/lib/Cards/Card\";\r\nimport CardTitle from \"react-md/lib/Cards/CardTitle\";\r\nimport CardText from \"react-md/lib/Cards/CardText\";\r\nimport Avatar from \"react-md/lib/Avatars\";\r\nimport FontIcon from \"react-md/lib/FontIcons\";\r\nimport Snackbar from \"react-md/lib/Snackbars\";\r\nimport config from \"../../../data/SiteConfig\";\r\n\r\nclass Disqus extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      toasts: []\r\n    };\r\n    this.notifyAboutComment = this.notifyAboutComment.bind(this);\r\n    this.onSnackbarDismiss = this.onSnackbarDismiss.bind(this);\r\n  }\r\n\r\n  onSnackbarDismiss() {\r\n    const [, ...toasts] = this.state.toasts;\r\n    this.setState({ toasts });\r\n  }\r\n  notifyAboutComment() {\r\n    const toasts = this.state.toasts.slice();\r\n    toasts.push({ text: \"New comment available!\" });\r\n    this.setState({ toasts });\r\n  }\r\n  render() {\r\n    const { postNode, expanded } = this.props;\r\n    if (!config.disqusShortname) {\r\n      return null;\r\n    }\r\n    const post = postNode.frontmatter;\r\n    const url = urljoin(\r\n      config.siteUrl,\r\n      config.pathPrefix,\r\n      postNode.fields.slug\r\n    );\r\n\r\n    return (\r\n      <Card className=\"md-grid md-cell md-cell--12\">\r\n        <CardTitle\r\n          title=\"Comments\"\r\n          avatar={<Avatar icon={<FontIcon>comment</FontIcon>} />}\r\n          expander={!expanded}\r\n        />\r\n        <CardText expandable={!expanded}>\r\n          <ReactDisqusComments\r\n            shortname={config.disqusShortname}\r\n            identifier={post.title}\r\n            title={post.title}\r\n            url={url}\r\n            category_id={post.category_id}\r\n            onNewComment={this.notifyAboutComment}\r\n          />\r\n        </CardText>\r\n        <Snackbar\r\n          toasts={this.state.toasts}\r\n          onDismiss={this.onSnackbarDismiss}\r\n        />\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Disqus;\r\n","import React, { Component } from \"react\";\r\nimport CardTitle from \"react-md/lib/Cards/CardTitle\";\r\nimport Avatar from \"react-md/lib/Avatars\";\r\nimport FontIcon from \"react-md/lib/FontIcons\";\r\nimport { Link } from \"gatsby\";\r\nimport moment from \"moment\";\r\nimport _ from \"lodash\";\r\nimport config from \"../../../data/SiteConfig\";\r\nimport \"./PostInfo.scss\";\r\n\r\nclass PostInfo extends Component {\r\n  render() {\r\n    const { postNode } = this.props;\r\n    const post = postNode.frontmatter;\r\n    return (\r\n      <div className=\"post-info\">\r\n        <CardTitle\r\n          avatar={<Avatar icon={<FontIcon iconClassName=\"fa fa-calendar\" />} />}\r\n          title={`Published on ${moment(postNode.fields.date).format(\r\n            config.dateFormat\r\n          )}`}\r\n          subtitle={`${postNode.timeToRead} min read`}\r\n        />\r\n        <Link\r\n          className=\"category-link\"\r\n          to={`/categories/${_.kebabCase(post.category)}`}\r\n        >\r\n          <CardTitle\r\n            avatar={\r\n              <Avatar icon={<FontIcon iconClassName=\"fa fa-folder-open\" />} />\r\n            }\r\n            title=\"In category\"\r\n            subtitle={post.category}\r\n          />\r\n        </Link>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PostInfo;\r\n","import React, { Component } from \"react\";\r\nimport {\r\n  FacebookShareButton,\r\n  GooglePlusShareButton,\r\n  LinkedinShareButton,\r\n  TwitterShareButton,\r\n  TelegramShareButton,\r\n  RedditShareButton,\r\n  FacebookShareCount,\r\n  GooglePlusShareCount,\r\n  LinkedinShareCount,\r\n  RedditShareCount,\r\n  FacebookIcon,\r\n  TwitterIcon,\r\n  TelegramIcon,\r\n  GooglePlusIcon,\r\n  LinkedinIcon,\r\n  RedditIcon\r\n} from \"react-share\";\r\nimport urljoin from \"url-join\";\r\nimport config from \"../../../data/SiteConfig\";\r\nimport \"./SocialLinks.scss\";\r\n\r\nclass SocialLinks extends Component {\r\n  render() {\r\n    const { postNode, postPath, mobile } = this.props;\r\n    const post = postNode.frontmatter;\r\n    const url = urljoin(config.siteUrl, config.pathPrefix, postPath);\r\n    const iconSize = mobile ? 36 : 48;\r\n    const filter = count => (count > 0 ? count : \"\");\r\n    const renderShareCount = count => (\r\n      <div className=\"share-count\">{filter(count)}</div>\r\n    );\r\n\r\n    return (\r\n      <div className=\"social-links\">\r\n        <RedditShareButton url={url} title={post.title}>\r\n          <RedditIcon round size={iconSize} />\r\n          <RedditShareCount url={url}>\r\n            {count => renderShareCount(count)}\r\n          </RedditShareCount>\r\n        </RedditShareButton>\r\n        <TwitterShareButton url={url} title={post.title}>\r\n          <TwitterIcon round size={iconSize} />\r\n        </TwitterShareButton>\r\n        <GooglePlusShareButton url={url}>\r\n          <GooglePlusIcon round size={iconSize} />\r\n          <GooglePlusShareCount url={url}>\r\n            {count => renderShareCount(count)}\r\n          </GooglePlusShareCount>\r\n        </GooglePlusShareButton>\r\n        <FacebookShareButton url={url} quote={postNode.excerpt}>\r\n          <FacebookIcon round size={iconSize} />\r\n          <FacebookShareCount url={url}>\r\n            {count => renderShareCount(count)}\r\n          </FacebookShareCount>\r\n        </FacebookShareButton>\r\n        <LinkedinShareButton\r\n          url={url}\r\n          title={post.title}\r\n          description={postNode.excerpt}\r\n        >\r\n          <LinkedinIcon round size={iconSize} />\r\n          <LinkedinShareCount url={url}>\r\n            {count => renderShareCount(count)}\r\n          </LinkedinShareCount>\r\n        </LinkedinShareButton>\r\n        <TelegramShareButton url={url}>\r\n          <TelegramIcon round size={iconSize} />\r\n        </TelegramShareButton>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SocialLinks;\r\n","import React, { Component } from \"react\";\r\nimport FontIcon from \"react-md/lib/FontIcons\";\r\nimport { Link } from \"gatsby\";\r\nimport \"./PostSuggestions.scss\";\r\n\r\nexport default class PostSuggestions extends Component {\r\n  render() {\r\n    const { postNode } = this.props;\r\n    const postFields = postNode.fields;\r\n    return (\r\n      <div className=\"post-suggestions md-grid md-cell--12\">\r\n        <Link to={postFields.prevSlug} className=\"post-suggestion\">\r\n          <FontIcon\r\n            forceFontSize\r\n            forceSize={64}\r\n            className=\"secondary-color arrow-nav\"\r\n          >\r\n            arrow_back\r\n          </FontIcon>\r\n          <div className=\"headline-container hide-on-mobile\">\r\n            <h2 className=\"md-body-2 secondary-color\">Previous</h2>\r\n            <h6 className=\"md-headline secondary-color\">\r\n              {postFields.prevTitle}\r\n            </h6>\r\n          </div>\r\n        </Link>\r\n        <Link to={postFields.nextSlug} className=\"post-suggestion\">\r\n          <div className=\"headline-container\">\r\n            <h2 className=\"md-body-2 secondary-color\">Next</h2>\r\n            <h6 className=\"md-headline secondary-color\">\r\n              {postFields.nextTitle}\r\n            </h6>\r\n          </div>\r\n          <FontIcon\r\n            forceFontSize\r\n            forceSize={64}\r\n            className=\"secondary-color arrow-nav\"\r\n          >\r\n            arrow_forward\r\n          </FontIcon>\r\n        </Link>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport Helmet from \"react-helmet\";\r\nimport { graphql } from \"gatsby\";\r\nimport Card from \"react-md/lib/Cards\";\r\nimport CardText from \"react-md/lib/Cards/CardText\";\r\nimport Layout from \"../layout\";\r\nimport UserInfo from \"../components/UserInfo\";\r\nimport Disqus from \"../components/Disqus\";\r\nimport PostTags from \"../components/PostTags\";\r\nimport PostCover from \"../components/PostCover\";\r\nimport PostInfo from \"../components/PostInfo\";\r\nimport SocialLinks from \"../components/SocialLinks\";\r\nimport PostSuggestions from \"../components/PostSuggestions\";\r\nimport SEO from \"../components/SEO\";\r\nimport config from \"../../data/SiteConfig\";\r\nimport \"./b16-tomorrow-dark.css\";\r\nimport \"./post.scss\";\r\n\r\nexport default class PostTemplate extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      mobile: true\r\n    };\r\n    this.handleResize = this.handleResize.bind(this);\r\n  }\r\n  componentDidMount() {\r\n    this.handleResize();\r\n    window.addEventListener(\"resize\", this.handleResize);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener(\"resize\", this.handleResize);\r\n  }\r\n\r\n  handleResize() {\r\n    if (window.innerWidth >= 640) {\r\n      this.setState({ mobile: false });\r\n    } else {\r\n      this.setState({ mobile: true });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { mobile } = this.state;\r\n    const { slug } = this.props.pageContext;\r\n    const expanded = !mobile;\r\n    const postOverlapClass = mobile ? \"post-overlap-mobile\" : \"post-overlap\";\r\n    const postNode = this.props.data.markdownRemark;\r\n    const post = postNode.frontmatter;\r\n    if (!post.id) {\r\n      post.id = slug;\r\n    }\r\n    if (!post.category_id) {\r\n      post.category_id = config.postDefaultCategoryID;\r\n    }\r\n\r\n    const coverHeight = mobile ? 180 : 350;\r\n    return (\r\n      <Layout location={this.props.location}>\r\n        <div className=\"post-page md-grid md-grid--no-spacing\">\r\n          <Helmet>\r\n            <title>{`${post.title} | ${config.siteTitle}`}</title>\r\n            <link rel=\"canonical\" href={`${config.siteUrl}${post.id}`} />\r\n          </Helmet>\r\n          <SEO postPath={slug} postNode={postNode} postSEO />\r\n          <PostCover\r\n            postNode={postNode}\r\n            coverHeight={coverHeight}\r\n            coverClassName=\"md-grid md-cell--9 post-cover\"\r\n          />\r\n          <div\r\n            className={`md-grid md-cell--9 post-page-contents mobile-fix ${postOverlapClass}`}\r\n          >\r\n            <Card className=\"md-grid md-cell md-cell--12 post\">\r\n              <CardText className=\"post-body\">\r\n                <h1 className=\"md-display-2 post-header\">{post.title}</h1>\r\n                <PostInfo postNode={postNode} />\r\n                <div dangerouslySetInnerHTML={{ __html: postNode.html }} />\r\n              </CardText>\r\n              <div className=\"post-meta\">\r\n                <PostTags tags={post.tags} />\r\n                <SocialLinks\r\n                  postPath={slug}\r\n                  postNode={postNode}\r\n                  mobile={this.state.mobile}\r\n                />\r\n              </div>\r\n            </Card>\r\n            <UserInfo\r\n              className=\"md-grid md-cell md-cell--12\"\r\n              config={config}\r\n              expanded={expanded}\r\n            />\r\n            <Disqus postNode={postNode} expanded={expanded} />\r\n          </div>\r\n\r\n          <PostSuggestions postNode={postNode} />\r\n        </div>\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n\r\nexport const pageQuery = graphql`\r\n  query BlogPostBySlug($slug: String!) {\r\n    markdownRemark(fields: { slug: { eq: $slug } }) {\r\n      html\r\n      timeToRead\r\n      excerpt\r\n      frontmatter {\r\n        title\r\n        cover\r\n        date\r\n        category\r\n        tags\r\n      }\r\n      fields {\r\n        nextTitle\r\n        nextSlug\r\n        prevTitle\r\n        prevSlug\r\n        slug\r\n        date\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import React, { Component } from \"react\";\r\nimport _ from \"lodash\";\r\nimport { Link } from \"gatsby\";\r\nimport Chip from \"react-md/lib/Chips\";\r\nimport \"./PostTags.scss\";\r\n\r\nclass PostTags extends Component {\r\n  render() {\r\n    const { tags } = this.props;\r\n    return (\r\n      <div className=\"post-tag-container\">\r\n        {tags &&\r\n          tags.map(tag => (\r\n            <Link\r\n              key={tag}\r\n              style={{ textDecoration: \"none\" }}\r\n              to={`/tags/${_.kebabCase(tag)}`}\r\n            >\r\n              <Chip label={tag} className=\"post-preview-tags\" />\r\n            </Link>\r\n          ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PostTags;\r\n","import React, { Component } from \"react\";\r\nimport Helmet from \"react-helmet\";\r\nimport urljoin from \"url-join\";\r\nimport config from \"../../../data/SiteConfig\";\r\n\r\nclass SEO extends Component {\r\n  render() {\r\n    const { postNode, postPath, postSEO } = this.props;\r\n    let title;\r\n    let description;\r\n    let image;\r\n    let postURL;\r\n    if (postSEO) {\r\n      const postMeta = postNode.frontmatter;\r\n      ({ title } = postMeta);\r\n      description = postMeta.description\r\n        ? postMeta.description\r\n        : postNode.excerpt;\r\n      image = postMeta.cover;\r\n      postURL = urljoin(config.siteUrl, config.pathPrefix, postPath);\r\n    } else {\r\n      title = config.siteTitle;\r\n      description = config.siteDescription;\r\n      image = config.siteLogo;\r\n    }\r\n    image = urljoin(config.siteUrl, config.pathPrefix, image);\r\n    const blogURL = urljoin(config.siteUrl, config.pathPrefix);\r\n    const schemaOrgJSONLD = [\r\n      {\r\n        \"@context\": \"http://schema.org\",\r\n        \"@type\": \"WebSite\",\r\n        url: blogURL,\r\n        name: title,\r\n        alternateName: config.siteTitleAlt ? config.siteTitleAlt : \"\"\r\n      }\r\n    ];\r\n    if (postSEO) {\r\n      schemaOrgJSONLD.push([\r\n        {\r\n          \"@context\": \"http://schema.org\",\r\n          \"@type\": \"BreadcrumbList\",\r\n          itemListElement: [\r\n            {\r\n              \"@type\": \"ListItem\",\r\n              position: 1,\r\n              item: {\r\n                \"@id\": postURL,\r\n                name: title,\r\n                image\r\n              }\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          \"@context\": \"http://schema.org\",\r\n          \"@type\": \"BlogPosting\",\r\n          url: blogURL,\r\n          name: title,\r\n          alternateName: config.siteTitleAlt ? config.siteTitleAlt : \"\",\r\n          headline: title,\r\n          image: {\r\n            \"@type\": \"ImageObject\",\r\n            url: image\r\n          },\r\n          description\r\n        }\r\n      ]);\r\n    }\r\n    return (\r\n      <Helmet>\r\n        {/* General tags */}\r\n        <meta name=\"description\" content={description} />\r\n        <meta name=\"image\" content={image} />\r\n\r\n        {/* Schema.org tags */}\r\n        <script type=\"application/ld+json\">\r\n          {JSON.stringify(schemaOrgJSONLD)}\r\n        </script>\r\n\r\n        {/* OpenGraph tags */}\r\n        <meta property=\"og:url\" content={postSEO ? postURL : blogURL} />\r\n        {postSEO ? <meta property=\"og:type\" content=\"article\" /> : null}\r\n        <meta property=\"og:title\" content={title} />\r\n        <meta property=\"og:description\" content={description} />\r\n        <meta property=\"og:image\" content={image} />\r\n        <meta\r\n          property=\"fb:app_id\"\r\n          content={config.siteFBAppID ? config.siteFBAppID : \"\"}\r\n        />\r\n\r\n        {/* Twitter Card tags */}\r\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\r\n        <meta\r\n          name=\"twitter:creator\"\r\n          content={config.userTwitter ? config.userTwitter : \"\"}\r\n        />\r\n        <meta name=\"twitter:title\" content={title} />\r\n        <meta name=\"twitter:description\" content={description} />\r\n        <meta name=\"twitter:image\" content={image} />\r\n      </Helmet>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SEO;\r\n","import React, { Component } from \"react\";\r\nimport Img from \"gatsby-image\";\r\nimport path from \"path\";\r\nimport \"./PostCover.scss\";\r\n\r\nclass PostCover extends Component {\r\n  render() {\r\n    const { fileEdges, postNode, coverHeight, coverClassName } = this.props;\r\n    const post = postNode.frontmatter ? postNode.frontmatter : postNode;\r\n    const coverNodeList = fileEdges.filter(fileNode => {\r\n      if (fileNode.node.childImageSharp === null) return false;\r\n\r\n      if (\r\n        fileNode.node.absolutePath.indexOf(\r\n          path.join(\"/static/assets/\", post.cover)\r\n        ) !== -1\r\n      )\r\n        return true;\r\n\r\n      return false;\r\n    });\r\n\r\n    if (coverNodeList.length === 1) {\r\n      return (\r\n        <Img\r\n          fluid={coverNodeList[0].node.childImageSharp.fluid}\r\n          outerWrapperClassName={coverClassName}\r\n          style={{ height: coverHeight, width: \"100%\" }}\r\n        />\r\n      );\r\n    }\r\n\r\n    /* eslint no-undef: \"off\" */\r\n    const coverURL =\r\n      post.cover.substring(0, 1) === \"/\"\r\n        ? __PATH_PREFIX__ + post.cover\r\n        : post.cover;\r\n    return (\r\n      <div\r\n        style={{\r\n          backgroundImage: `url(${coverURL})`,\r\n          height: `${coverHeight}px`\r\n        }}\r\n        className={coverClassName}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default PostCover;\r\n","import React, { Component } from \"react\";\r\nimport { StaticQuery, graphql } from \"gatsby\";\r\nimport PostCover from \"./PostCoverComponent\";\r\n\r\nclass queryWrapper extends Component {\r\n  render() {\r\n    const { postNode, coverHeight, coverClassName } = this.props;\r\n    return (\r\n      <StaticQuery\r\n        query={graphql`\r\n          query CoverQuery {\r\n            allFile {\r\n              edges {\r\n                node {\r\n                  id\r\n                  absolutePath\r\n                  childImageSharp {\r\n                    id\r\n                    resolutions {\r\n                      base64\r\n                      tracedSVG\r\n                      aspectRatio\r\n                      width\r\n                      height\r\n                      src\r\n                      srcSet\r\n                      srcWebp\r\n                      srcSetWebp\r\n                      originalName\r\n                    }\r\n                    internal {\r\n                      contentDigest\r\n                      type\r\n                      owner\r\n                    }\r\n                    fluid(maxWidth: 1240) {\r\n                      ...GatsbyImageSharpFluid\r\n                      originalName\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        `}\r\n        render={data => (\r\n          <PostCover\r\n            fileEdges={data.allFile.edges}\r\n            postNode={postNode}\r\n            coverHeight={coverHeight}\r\n            coverClassName={coverClassName}\r\n          />\r\n        )}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default queryWrapper;\r\n"],"sourceRoot":""}